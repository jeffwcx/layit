/*
* Copyright 2018 Jeff Wang. All rights reserved.
* Licensed under MIT.
*/

$row-x-dirs: (left: flex-start,
              right: flex-end,
              center: center,
              between: space-between,
              around: space-around);
$row-y-dirs: (top: flex-start,
              bottom: flex-end,
              center: center,
              baseline: baseline,
              stretch: stretch);
$y-dirs: (top: flex-start,
          bottom: flex-end,
          center: center,
          between: space-between,
          around:space-around,
          stretch: stretch);

@mixin mapDir ($direction, $dirmap, $prop) {
  @each $dirname, $dir in $dirmap {
    &.#{$direction}-#{$dirname} {
      #{$prop}: $dir;
    }
  }
}

.l-row {
  display: flex;
  flex-flow: row nowrap;
  @include mapDir(x, $row-x-dirs, justify-content);
  @include mapDir(y, $row-y-dirs, align-items);
  @include mapDir(m, $y-dirs, align-content);
  &.is-multi{
    flex-wrap: wrap;
  }
}

@function getCommonDivisor ($n1, $n2) {
  @if $n1 == $n2 {
    @return $n2;
  }
  $result: 1;
  @for $i from 2 through ceil($n2 / 2) {
    @if $n1 % $i == 0 and $n2 % $i == 0 and $i > $result {
      $result: $i;
    }
  }
  @return $result;
}

@mixin unit ($units) {
  @for $i from 1 through $units {
    &.is-#{$i}-#{$units} {
      flex-basis: percentage($number: $i / $units);
    }
    $commonDivisor: getCommonDivisor($i, $units);
    @if $commonDivisor != 1 {
      $i-x: $i / $commonDivisor;
      $units-x: $units / $commonDivisor;
      &.is-#{$i-x}-#{$units-x} {
        flex-basis: percentage($number: $i-x / $units-x);
      }
    }
  }
}

$units: 12 !default;

.unit {
  flex-grow: 0;
  flex-shrink: 1;
  @include unit($units);
}

.is-no-shrink {
  flex-shrink: 0;
}

.is-grow {
  flex-grow: 1;
}

.is-origin {
  flex-shrink: 0;
  flex-grow: 0;
}

$level: 5 !default;
$rate: 5px !default;
@mixin gap ($rate, $level) {
  @for $i from 1 through $level {
    @if $i == 1 {
      .units-gap {
        margin-left: -$rate;
        margin-right: -$rate;
        >.unit {
          box-sizing: border-box;
          padding-left: $rate;
          padding-right: $rate;
        }
      }
    } @else {
      $gap: $i * $rate;
      .units-gap-#{$i} {
        margin-left: -$gap;
        margin-right: -$gap;
        >.unit {
          box-sizing: border-box;
          padding-left: $gap;
          padding-right: $gap;
        }
      }
    }
  }
}

@include gap($rate, $level);


.l-col {
  display: flex;
  flex-flow: column wrap;
  @include mapDir(x, $row-x-dirs, justify-content);
}